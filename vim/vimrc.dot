"	1. Place file in home directory as .vimrc
"	2. Run the following command in terminal
"		mkdir .vim .vim/bundle .vim/backup .vim/swap .vim/cache .vim/undo; git clone https://github.com/gmarik/vundle.git .vim/bundle/vundle
"	3. Launch Vim and Run
"		:BundleInstall
"	5. Restart Vim
set nocompatible
filetype off

if has("win32")
    " We're on Windows.
    let g:vim_home_path = "~/vimfiles"
else
    " We're on some POSIX system, hopefully.
    let g:vim_home_path = "~/.vim"
endif

execute "set rtp+=" . g:vim_home_path . "/bundle/vundle/"
let g:vundle_default_git_proto = 'https'
call vundle#rc(g:vim_home_path. "/bundle")

Bundle 'gmarik/vundle'

" Language plugins
Bundle "vim-ruby/vim-ruby"
Bundle "tpope/vim-bundler"
Bundle "empanda/vim-varnish"
Bundle "Glench/Vim-Jinja2-Syntax"
Bundle "fatih/vim-go"
Bundle "rodjek/vim-puppet"
Bundle "tpope/vim-markdown"

" Other plugins
Bundle "godlygeek/tabular"
Bundle "kien/ctrlp.vim"
Bundle "Lokaltog/vim-easymotion"
Bundle 'bling/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle "rking/ag.vim"
Bundle "scrooloose/syntastic"
Bundle "tpope/vim-eunuch"
Bundle "tpope/vim-fugitive"


" tagbar
Bundle "majutsushi/tagbar"

" Personal bundles
Bundle 'mitchellh/vim-misc'

" solarized
"Bundle 'altercation/vim-colors-solarized'

Bundle "barn/Pychimp-vim"

Bundle "kevinw/pyflakes-vim"

" RSpec
Bundle 'thoughtbot/vim-rspec'
Bundle 'jgdavey/tslime.vim'
Bundle 'tpope/vim-dispatch'

Bundle 'klen/python-mode'
Bundle 'kien/rainbow_parentheses.vim'

Bundle 'tpope/vim-unimpaired'
Bundle 'Shutnik/jshint2.vim'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'

" neocomplete doesn't work with neovim, use deoplete.nvim instead.
"Bundle 'Shougo/neocomplete.vim'
Bundle 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Bundle 'zchee/deoplete-go', { 'do': 'make'}
Bundle "fishbullet/deoplete-ruby"

Bundle 'Shougo/neosnippet.vim'
Bundle 'Shougo/neosnippet-snippets'
Bundle 'ervandew/supertab'
Bundle 'sjl/vitality.vim'
Bundle "markcornick/vim-terraform"

" install colorscheme
"Bundle 'morhetz/gruvbox'
"Bundle 'tomasr/molokai'

" Dash integration
Bundle 'rizzatti/dash.vim'

Bundle 'martinda/Jenkinsfile-vim-syntax'

Bundle 'mrtazz/vim-stencil'
Bundle 'mrtazz/simplenote.vim'
Bundle 'flazz/vim-colorschemes'

" Turn on filetype plugin and indent loading so that loading the
" vim-misc stuff below loads the proper files.
filetype plugin indent on

" Load in my custom vimrc if it exists
if filereadable(expand(g:vim_home_path . "/bundle/vim-misc/vimrc.vim"))
    execute "source " . g:vim_home_path . "/bundle/vim-misc/vimrc.vim"
endif

set t_Co=256
" solarized options
"set background=dark
"let g:solarized_termcolors = 256
"let g:solarized_visibility = "medium"
"let g:solarized_contrast = "hard"
"set background=light

"set background=dark
"colorscheme solarized
colorscheme molokai

"let g:molokai_original = 1
let g:rehash256 = 1

"colorscheme gruvbox

map <C-K> :nohlsearch<CR>
map <C-N><C-N> :set invnumber<CR>

" change the mapleader from \ to ,
let mapleader=","

" RSpec.vim mappings
"let g:rspec_command = 'call Send_to_Tmux("bundle exec rspec {spec}\n")'
"let g:rspec_command = "Dispatch rspec {spec}"
let g:dispatch_compilers = {
      \ 'latex': 'tex',
      \ 'bundle exec': ''}

let g:rspec_command = "Dispatch bundle exec rspec -f d -c {spec}"

"let mapleader=","
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" NERDTree
nmap <silent> <leader>p :NERDTreeToggle<CR>
nmap <silent> <leader>q :NERDTreeClose<CR>

" tagbar
nmap <silent> <leader>l :TagbarToggle<CR>

map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>


" Close vim when only oppened window is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeWinPos = "right"
let g:tagbar_ctags_bin = "/usr/local/Cellar/ctags/5.8/bin/ctags"
"set guifont=Monaco:h13

set number


" Startify
let g:startify_list_order = ['bookmarks', 'files', 'sessions']
"let g:startify_bookmarks = [
"            \ '~/Devel/python/blip',
"            \ ]
let g:startify_custom_header = [
            \ '                              _            _  ',
            \ '                             | |          | | ',
            \ '                  _____ _   _| | _____  __| | ',
            \ '                 (___  ) | | | |(____ |/ _  | ',
            \ '                  / __/| |_| | |/ ___ ( (_| | ',
            \ '                 (_____)\__  |\_)_____|\____| ',
            \ '                       (____/ ',
            \ '      ======================================================',
            \ '',
            \ ]


let g:pymode_rope = 1
let g:pymode_rope_goto_definition_cmd = 'vnew'

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"doc window in python-mode: https://github.com/klen/python-mode/issues/384
"set  completeopt=menu,preview
set completeopt=menu

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all


let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

" rainbow parentheses always on
au VimEnter * RainbowParenthesesActivate
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" for email:  unfold and delete to your signature
noremap ,dd zi:.;/^-- $/d<CR>O-- <UP><End><CR><CR><UP><CR><C-O>zi

au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

map <Leader><Leader>c :!/usr/local/bin/ctags -R -f ./tags .  `python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()" `<CR>
set tags+=tags;


set iskeyword=-,:,@,48-57,_,192-255
set norelativenumber

"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
"let g:airline_theme="bubblegum"
"let g:airline_theme="gruvbox"
let g:airline_theme="powerlineish"

let g:Powerline_symbols = 'fancy'

set guifont=Inconsolata-dz\ for\ Powerline:h12

" vim-go
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <C-]> <Plug>(go-def)

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)


au FileType go nmap <silent><Leader>L :GoLint<CR>
au FileType go nmap <silent><Leader>v :GoVet<CR>



let g:go_fmt_autosave = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_gocode_propose_builtins = 1

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"neocomplete
"let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
"let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplete#undo_completion()
"inoremap <expr><C-l>     neocomplete#complete_common_string()
"
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
"  return neocomplete#close_popup() . "\<CR>"
"  " For no inserting <CR> key.
"  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplete#close_popup()
"inoremap <expr><C-e>  neocomplete#cancel_popup()


let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

autocmd FileType python setlocal completeopt-=preview

let g:pymode_rope_goto_definition_bind = "<C-]>"

"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_fuzzy_completion = 1
"let g:neocomplete_enable_fuzzy_completion_start_length = 2
"let g:neocomplete_enable_camel_case_completion = 0
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#enable_auto_delimiter = 1
"let g:neocomplete#max_list = 10
"let g:neocomplete#force_overwrite_completefunc = 1
"let g:neocomplete#enable_auto_select = 0
"
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
"
"autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
"autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

map <leader>I gg=G''

" cursor line slows down vim A LOT
set nocursorline
" same as centered cursor
set scrolloff=5

set mouse=
let g:python_host_prog='/usr/local/bin/python'
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_refresh_always=0

map <Leader>ct :silent !~/.rbenv/shims/ripper-tags -R --exclude=vendor && ~/.rbenv/shims/coffeetags -R -a -f tags<CR>

iunmap jj
iunmap jJ
iunmap Jj
iunmap JJ
iunmap jk
iunmap jK
iunmap Jk
iunmap JK

source ~/.simplenoterc
let g:StencilTemplatepath = "~/.vim/templates/"

let g:SimplenoteFiletype = "markdown"

function! SetupEnvironment()
  let l:path = expand('%:p')
  if l:path =~ '/Users/dom/src'
    if &filetype == 'ruby'
      setlocal ts=2 sts=2 sw=2
    elseif &filetype == 'puppet'
      setlocal ts=2 sts=2 sw=2
    elseif &filetype == 'sh'
      setlocal ts=2 sts=2 sw=2
    elseif &filetype == 'php'
      setlocal ts=2 sts=2 sw=2
    endif
  elseif l:path =~ '/Users/dom/src/SF'
    if &filetype == 'ruby'
      setlocal ts=4 sts=4 sw=4
    elseif &filetype == 'puppet'
      setlocal ts=4 sts=4 sw=4
    elseif &filetype == 'sh'
      setlocal ts=4 sts=4 sw=4
    elseif &filetype == 'php'
      setlocal ts=4 sts=4 sw=4
    endif
  endif
endfunction
autocmd! BufReadPost,BufNewFile * call SetupEnvironment()

" remember previous cursos position
if has("autocmd")
    filetype plugin indent on
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
endif " has("autocmd")


