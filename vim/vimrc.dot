"	1. Place file in home directory as .config/nvim/init.vim and symlink it to
"	~/.vimrc
"	2. Run the following command in terminal
"		mkdir .vim .vim/bundle .vim/backup .vim/swap .vim/cache .vim/undo; git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
"	3. Launch Vim and Run
"		:NeoBundleInstall
"	5. Restart Vim
set nocompatible
filetype off

if has("win32")
    " We're on Windows.
    let g:vim_home_path = "~/vimfiles"
else
    " We're on some POSIX system, hopefully.
    let g:vim_home_path = "~/.vim"
endif

"execute "set rtp+=" . g:vim_home_path . "/bundle/vundle/"
"let g:vundle_default_git_proto = 'https'
"call vundle#rc(g:vim_home_path. "/bundle")


" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Language plugins
NeoBundle 'carlitux/deoplete-ternjs', { 'build': { 'mac': 'npm install -g tern', 'unix': 'npm install -g tern' }}
NeoBundle 'ternjs/tern_for_vim'
NeoBundle "vim-ruby/vim-ruby"
NeoBundle "pangloss/vim-javascript"
NeoBundle "wokalski/autocomplete-flow"
NeoBundle "empanda/vim-varnish"
NeoBundle "Glench/Vim-Jinja2-Syntax"
NeoBundle "fatih/vim-go"
NeoBundle 'mdempsky/gocode', { 'rtp': 'nvim' }
"NeoBundle 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
NeoBundle "rodjek/vim-puppet"
NeoBundle "tpope/vim-markdown"
NeoBundle "rust-lang/rust.vim"

" Other plugins
NeoBundle "godlygeek/tabular"
NeoBundle "kien/ctrlp.vim"
NeoBundle "Lokaltog/vim-easymotion"
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle "rking/ag.vim"
NeoBundle "scrooloose/syntastic"
NeoBundle "tpope/vim-eunuch"
NeoBundle "tpope/vim-fugitive"

NeoBundle 'dracula/vim', { 'name': 'dracula' }

NeoBundle 'neoclide/coc.nvim', {'branch': 'release'}

"
"
" tagbar
NeoBundle "majutsushi/tagbar"

" Personal bundles
NeoBundle 'mitchellh/vim-misc'

" themes
"NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'joshdick/onedark.vim'

NeoBundle "barn/Pychimp-vim"

"NeoBundle "kevinw/pyflakes-vim"
NeoBundle 'nvie/vim-flake8'
NeoBundle 'alfredodeza/pytest.vim'

" RSpec
NeoBundle 'thoughtbot/vim-rspec'
NeoBundle 'jgdavey/tslime.vim'
NeoBundle 'tpope/vim-dispatch'

"NeoBundle 'python-mode/python-mode', {'branch': 'develop'}

"NeoBundle 'kien/rainbow_parentheses.vim'

NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'Shutnik/jshint2.vim'

NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'ervandew/supertab'
NeoBundle 'sjl/vitality.vim'
NeoBundle "markcornick/vim-terraform"

" Dash integration
NeoBundle 'rizzatti/dash.vim'

NeoBundle 'martinda/Jenkinsfile-vim-syntax'

NeoBundle 'mrtazz/vim-stencil'
NeoBundle 'mrtazz/simplenote.vim'
NeoBundle 'flazz/vim-colorschemes'


NeoBundle 'davidhalter/jedi-vim'
"NeoBundle 'zchee/deoplete-go', {'build': {'unix': 'make'}}
"NeoBundle 'zchee/deoplete-jedi'

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'roxma/nvim-yarp'
NeoBundle 'roxma/vim-hug-neovim-rpc'

NeoBundle 'scrooloose/nerdtree'
NeoBundle 'pearofducks/ansible-vim'

NeoBundle 'tsandall/vim-rego'

NeoBundle 'google/vim-jsonnet'
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'lambdalisue/vim-pyenv'
NeoBundle 'jmcantrell/vim-virtualenv'
"NeoBundle 'w0rp/ale'

NeoBundle 'christoomey/vim-tmux-navigator'

"NeoBundle 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Do not load vim-pyenv until *.py is opened and
" make sure that it is loaded after jedi-vim is loaded.
NeoBundleLazy 'lambdalisue/vim-pyenv', {
        \ 'depends': ['davidhalter/jedi-vim'],
        \ 'autoload': {
        \   'filetypes': ['python', 'python3'],
        \ }}

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"Bundle 'gmarik/vundle'

" Turn on filetype plugin and indent loading so that loading the
" vim-misc stuff below loads the proper files.
filetype plugin indent on

" Load in my custom vimrc if it exists
if filereadable(expand(g:vim_home_path . "/bundle/vim-misc/vimrc.vim"))
    execute "source " . g:vim_home_path . "/bundle/vim-misc/vimrc.vim"
endif

set t_Co=256
" solarized options
set background=dark
let g:solarized_termcolors = 256
let g:solarized_visibility = "medium"
let g:solarized_contrast = "medium"
"set background=light

set background=dark
"colorscheme solarized8_dark
"colorscheme molokai
"colorscheme onedark

"let g:dracula_italic = 0
"
colorscheme dracula
"colorscheme jellybeans
set nolist

"let g:molokai_original = 1
let g:rehash256 = 1

"colorscheme gruvbox

"map <C-M> :nohlsearch<CR>
map <C-N><C-N> :set invnumber<CR>

" change the mapleader from \ to ,
let mapleader=","

" RSpec.vim mappings
"let g:rspec_command = 'call Send_to_Tmux("bundle exec rspec {spec}\n")'
"let g:rspec_command = "Dispatch rspec {spec}"
let g:dispatch_compilers = {
            \ 'latex': 'tex',
            \ 'bundle exec': ''}

let g:rspec_command = "Dispatch bundle exec rspec -f d -c {spec}"

"let mapleader=","
"map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" NERDTree
nmap <silent> <leader>p :NERDTreeToggle<CR>
nmap <silent> <leader>q :NERDTreeClose<CR>

" tagbar
nmap <silent> <leader>l :TagbarToggle<CR>

map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>


" Close vim when only oppened window is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeWinPos = "left"
"set guifont=Monaco:h13

let g:pymode_rope = 0
let g:pymode_rope_goto_definition_cmd = 'vnew'

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pylint', 'pep8', 'mccabe']
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all


let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

"" rainbow parentheses always on
"au VimEnter * RainbowParenthesesActivate
"au Syntax * RainbowParenthesesLoadRound
"au Syntax * RainbowParenthesesLoadSquare
"au Syntax * RainbowParenthesesLoadBraces

" for email:  unfold and delete to your signature
noremap ,dd zi:.;/^-- $/d<CR>O-- <UP><End><CR><CR><UP><CR><C-O>zi

au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

set tags+=tags;


set iskeyword=-,:,@,48-57,_,192-255
set relativenumber

set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
"let g:airline_theme="bubblegum"
"let g:airline_theme="powerlineish"
"let g:airline_theme="dracula"

let g:Powerline_symbols = 'fancy'

set guifont=Inconsolata-dz\ for\ Powerline:h12

" vim-go
"au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <C-]> <Plug>(go-def)

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)


au FileType go nmap <silent><Leader>L :GoMetaLinter<CR>
au FileType go nmap <silent><Leader>v :GoVet<CR>
au FileType go nmap <silent><Leader>d :GoDeclsDir<CR><Paste>
au FileType go nmap <silent><Leader>s :GoDecls<CR><Paste>

""" Toggle spell checking with ctrl-s ctrl-s
set spelllang=en_gb
nmap <silent> <leader>s :set spell!<CR>
" Automatically enable spell check on .md files
" https://robots.thoughtbot.com/vim-spell-checking
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.wiki setlocal spell
autocmd FileType gitcommit setlocal spell

let g:go_fmt_autosave = 1
let g:go_highlight_types = 1

let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1


" automatically highlight matching identifiers
let g:go_auto_sameids = 1

let g:go_gocode_propose_builtins = 1
"let g:go_gocode_propose_source = 1
let g:go_auto_type_info = 1
let g:go_gocode_unimported_packages=1
let g:go_fmt_command = "goimports"
let g:go_list_autoclose = 1
let g:go_metalinter_autosave_enabled = ['golint', 'vet', 'gotype']
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_deadline = "5s"
let g:syntastic_go_checkers = ['go', 'golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_auto_type_info = 0
let g:go_autodetect_gopath = 0
let g:go_addtags_transform = "snakecase"
" gometalinter configuration
let g:go_metalinter_command = "gometalinter --enable=gotype --enable=vet --enable=golint --disable=interfacer --disable=staticcheck --disable=gocyclo --disable=goconst --disable=deadcode --disable=unconvert --disable=structcheck --disable=gosec --disable=ineffassign --disable=varcheck --disable=maligned -t --exclude='exported method.*should have comment or be unexported'"
let g:go_metalinter_autosave_command = "gometalinter --enable=gotype --enable=vet --enable=golint -t --exclude='exported method.*should have comment or be unexported'"
let g:go_metalinter_deadline = "20s"
let g:go_metalinter_autosave = 1

" Fix for location list when vim-go is used together with Syntastic
let g:go_list_type = "quickfix"

let g:neosnippet#enable_snipmate_compatibility = 1

" Neosnippets
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

imap <C-k>     <Plug>(neosnippet_expand_or_jump)

"autocmd FileType python setlocal completeopt-=preview

"let g:pymode_rope_goto_definition_bind = "<C-]>"
"let g:pymode_rope_complete_on_dot = 0

"if !exists('g:neocomplete#force_omni_input_patterns')
"    let g:neocomplete#force_omni_input_patterns = {}
"endif

"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1


map <leader>I gg=G''

" cursor line slows down vim A LOT
set nocursorline
" same as centered cursor
set scrolloff=5

set mouse=
set completeopt+=noselect

"let g:python_host_prog='/Users/zylad/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog='/usr/local/bin/python3'
let g:ruby_host_prog='/Users/zylad/.rbenv/shims/ruby'
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
"call deoplete#custom#option({'max_list': 500, })
let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_camel_case = 1
let g:deoplete#max_abbr_width = 0
let g:deoplete#max_menu_width = 0

let g:pymode_lint_cwindow = 0

function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

" Jedi
let g:jedi#documentation_command = "K"
let g:jedi#use_splits_not_buffers = "right"
let g:jedi#goto_command = "<C-]>"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
"let g:jedi#completions_command = "<Tab>"
let g:jedi#rename_command = "<leader>r"
" disable popup on dot - deoplete-jedi will handle that
let g:jedi#popup_on_dot = 0


function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nmap <silent> <leader>ll :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>


let g:fugitive_git_executable = '/usr/local/bin/git'

map <Leader>ct :silent !~/.rbenv/shims/ripper-tags -R --exclude=vendor && ~/.rbenv/shims/coffeetags -R -a -f tags<CR>

iunmap jj
iunmap jJ
iunmap Jj
iunmap JJ
iunmap jk
iunmap jK
iunmap Jk
iunmap JK

source ~/.simplenoterc
let g:StencilTemplatepath = "~/.vim/templates/"

let g:SimplenoteFiletype = "markdown"

function! SetupEnvironment()
    let l:path = expand('%:p')
    if l:path =~ '/Users/dzyla/src/SF'
        if &filetype == 'ruby'
            setlocal ts=4 sts=4 sw=4
        elseif &filetype == 'puppet'
            setlocal ts=4 sts=4 sw=4
        elseif &filetype == 'sh'
            setlocal ts=4 sts=4 sw=4
        elseif &filetype == 'php'
            setlocal ts=4 sts=4 sw=4
        elseif &filetype == 'yaml'
            setlocal ts=4 sts=4 sw=4
        endif
    else
        if &filetype == 'ruby'
            setlocal ts=2 sts=2 sw=2
        elseif &filetype == 'puppet'
            setlocal ts=2 sts=2 sw=2
        elseif &filetype == 'sh'
            setlocal ts=2 sts=2 sw=2
        elseif &filetype == 'php'
            setlocal ts=2 sts=2 sw=2
        elseif &filetype == 'yaml'
            setlocal ts=2 sts=2 sw=2
        endif
    endif
endfunction
autocmd! BufReadPost,BufNewFile * call SetupEnvironment()

" remember previous cursos position
if has("autocmd")
    filetype plugin indent on
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
endif " has("autocmd")

function! StrTrim(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

let g:flow_path = StrTrim(system('PATH=$(npm bin):$PATH && which flow'))

if g:flow_path != 'flow not found'
  let g:deoplete#sources#flow#flow_bin = g:flow_path
endif

"let g:syntastic_python_checker="flake8"
"unlet g:syntastic_python_checker
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']
set expandtab

"autocmd BufWritePost *.py call Flake8()

" vim-virtualenv
let g:virtualenv_auto_activate = 1

"set completeopt=menuone,longest,preview
set completeopt=menuone,longest

" JS

let g:deoplete#sources#ternjs#tern_bin='/usr/local/bin/tern'
let g:deoplete#sources#ternjs#timeout = 1
let g:deoplete#sources#ternjs#types = 1
let g:tern_map_keys=1
"show argument hints
let g:tern_show_argument_hints='on_hold'
let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#depths = 1
let g:deoplete#sources#ternjs#docs = 1

" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0

" Whether to use a case-insensitive compare between the current word and
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1


" When completing a property and no completions are found, Tern will use some
" heuristics to try and return some properties anyway. Set this to 0 to
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0

" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0

" When disabled, only the text before the given position is considered part of
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0


" Whether to ignore the properties of Object.prototype unless they have been
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0

" Whether to include JavaScript keywords when completing something that is not
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0


"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ '...'
                \ ]




" ale
let g:ale_open_list = 'on_save'
nmap <silent> <Leader>k <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)
let b:ale_fixers = ['black', 'prettier', 'eslint']

let g:ale_fix_on_save = 1
let g:ale_linters = {
  \ 'python': ['flake8', 'pylint'] ,
  \ }
let g:ale_python_black_options = '-l79 --exclude /(\.git|\.hg|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist|\.json)/'
let g:go_gometalinter_options = "--enable=gotype --enable=vet --enable=golint -t --exclude='exported method.* should have comment or be unexported\.'"



