"	1. Place file in home directory as .vimrc
"	2. Run the following command in terminal
"		mkdir .vim .vim/bundle .vim/backup .vim/swap .vim/cache .vim/undo; git clone https://github.com/gmarik/vundle.git .vim/bundle/vundle
"	3. Launch Vim and Run
"		:BundleInstall
"	5. Restart Vim
set nocompatible
filetype off

if has("win32")
    " We're on Windows.
    let g:vim_home_path = "~/vimfiles"
else
    " We're on some POSIX system, hopefully.
    let g:vim_home_path = "~/.vim"
endif

execute "set rtp+=" . g:vim_home_path . "/bundle/vundle/"
let g:vundle_default_git_proto = 'https'
call vundle#rc(g:vim_home_path. "/bundle")

Bundle 'gmarik/vundle'

" Language plugins
Bundle "vim-ruby/vim-ruby"
Bundle "bryanjswift/vim-rust"
Bundle "empanda/vim-varnish"
Bundle "groenewege/vim-less"
Bundle "Glench/Vim-Jinja2-Syntax"
Bundle "fatih/vim-go"
Bundle "kchmck/vim-coffee-script"
Bundle "PProvost/vim-ps1"
Bundle "rodjek/vim-puppet"
Bundle "tpope/vim-markdown"
Bundle "vim-scripts/VimClojure"

" Other plugins
Bundle "godlygeek/tabular"
Bundle "kien/ctrlp.vim"
Bundle "Lokaltog/vim-easymotion"
"Bundle "Lokaltog/vim-powerline"
"Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'bling/vim-airline'
"Bundle "mileszs/ack.vim"
Bundle "rking/ag.vim"
Bundle "scrooloose/syntastic"
Bundle "tpope/vim-eunuch"
Bundle "tpope/vim-fugitive"
"Bundle "msanders/snipmate.vim"
Bundle "mhinz/vim-startify"

" ruby blocks
Bundle "tsaleh/vim-matchit"
Bundle "kana/vim-textobj-user"
Bundle "nelstrom/vim-textobj-rubyblock"

" tagbar
Bundle "majutsushi/tagbar"

" Personal bundles
Bundle 'mitchellh/vim-misc'

" solarized
Bundle "altercation/vim-colors-solarized"

" NERDTree
Bundle "scrooloose/nerdtree"

Bundle "kevinw/pyflakes-vim"

" RSpec
Bundle 'thoughtbot/vim-rspec'
Bundle 'jgdavey/tslime.vim'
Bundle 'tpope/vim-dispatch'

Bundle 'klen/python-mode'
Bundle 'kien/rainbow_parentheses.vim'

Bundle 'tpope/vim-unimpaired'
Bundle 'Shutnik/jshint2.vim'
"Bundle 'vim-scripts/TabBar'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'Shougo/neocomplete.vim'
Bundle 'Shougo/neosnippet.vim'
Bundle 'ervandew/supertab'
Bundle 'sjl/vitality.vim'
Plugin 'nsf/gocode', {'rtp': 'vim/'}
"Bundle 'davidhalter/jedi-vim'
Bundle "markcornick/vim-terraform"


" Turn on filetype plugin and indent loading so that loading the
" vim-misc stuff below loads the proper files.
filetype plugin indent on

" Load in my custom vimrc if it exists
if filereadable(expand(g:vim_home_path . "/bundle/vim-misc/vimrc.vim"))
    execute "source " . g:vim_home_path . "/bundle/vim-misc/vimrc.vim"
endif

set t_Co=256
" solarized options
"set background=dark
"let g:solarized_termcolors = 256
"let g:solarized_visibility = "medium"
"let g:solarized_contrast = "high"
"colorscheme solarized
colorscheme molokai

map <C-K> :nohlsearch<CR>
map <C-N><C-N> :set invnumber<CR>

" remember previous cursos position
if has("autocmd")
    filetype plugin indent on
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
endif " has("autocmd")

" change the mapleader from \ to ,
let mapleader=","

" RSpec.vim mappings
"let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
let g:rspec_command = "Dispatch rspec {spec}"

"let mapleader=","
"map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" NERDTree
nmap <silent> <leader>p :NERDTreeToggle<CR>
nmap <silent> <leader>q :NERDTreeClose<CR>

" tagbar
nmap <silent> <leader>l :TagbarToggle<CR>

map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>


" Close vim when only oppened window is NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeWinPos = "right"
let g:tagbar_ctags_bin = "/usr/local/Cellar/ctags/5.8/bin/ctags"
"set guifont=Monaco:h13

set number


" Startify
let g:startify_list_order = ['bookmarks', 'files', 'sessions']
"let g:startify_bookmarks = [
"            \ '~/Devel/python/blip',
"            \ ]
let g:startify_custom_header = [
            \ '                              _            _  ',
            \ '                             | |          | | ',
            \ '                  _____ _   _| | _____  __| | ',
            \ '                 (___  ) | | | |(____ |/ _  | ',
            \ '                  / __/| |_| | |/ ___ ( (_| | ',
            \ '                 (_____)\__  |\_)_____|\____| ',
            \ '                       (____/ ',
            \ '      ======================================================',
            \ '',
            \ ]


let g:pymode_rope = 1
let g:pymode_rope_goto_definition_cmd = 'vnew'

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"doc window in python-mode: https://github.com/klen/python-mode/issues/384
"set  completeopt=menu,preview
set completeopt=menu

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all


let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

" rainbow parentheses always on
au VimEnter * RainbowParenthesesActivate
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" for email:  unfold and delete to your signature
noremap ,dd zi:.;/^-- $/d<CR>O-- <UP><End><CR><CR><UP><CR><C-O>zi

au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap gd <Plug>(go-def)

map <Leader><Leader>c :!/usr/local/bin/ctags -R -f ./tags .  `python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()" `<CR>
set tags+=tags;

let g:go_fmt_autosave = 0

set iskeyword=-,:,@,48-57,_,192-255
set norelativenumber

"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

set t_Co=256
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
let g:airline_theme="bubblegum"

let g:Powerline_symbols = 'fancy'

set guifont=Inconsolata-dz\ for\ Powerline:h10

" vim-go
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <C-]> <Plug>(go-def)

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)


au FileType go nmap <silent><Leader>L :GoLint<CR>
au FileType go nmap <silent><Leader>v :GoVet<CR>


let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:neocomplete#enable_at_startup = 1
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

autocmd FileType python setlocal completeopt-=preview

let g:pymode_rope_goto_definition_bind = "<C-]>"

autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

map <leader>I gg=G''

" cursor line slows down vim A LOT
set nocursorline
" same as centered cursor
set scrolloff=0
